// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ComuseContext))]
    [Migration("20210806185220_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LastHistoryEventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastHistoryEventId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HistoryEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("HistoryEvents_general");
                });

            modelBuilder.Entity("DataAccess.Entities.RightEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Entities.SpaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("DataAccess.Entities.SpaceMembershipEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("UserId");

                    b.ToTable("SpacesMemberships");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LastHistoryEventId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastHistoryEventId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LastHistoryEventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastHistoryEventId");

                    b.HasIndex("SpaceId");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RightEntityRoleEntity", b =>
                {
                    b.Property<int>("RightsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("RightsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RightEntityRoleEntity");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryCreatedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasIndex("CategoryId");

                    b.ToTable("HistoryEvents_category_created");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryDeletedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HistoryEvents_category_deleted");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryEditedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId");

                    b.ToTable("HistoryEvents_category_edited");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleAssignedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryEvents_role_assigned");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleCreatedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("HistoryEvents_role_created");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleEditedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("HistoryEvents_role_edited");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceCreatedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.ToTable("HistoryEvents_space_created");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceEditedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("NewDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HistoryEvents_space_edited");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceImageChanged", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("NewImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldImage")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HistoryEvents_space_image_changed");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskCategoryChangedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("NewCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("OldCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasIndex("NewCategoryId");

                    b.HasIndex("OldCategoryId");

                    b.HasIndex("TaskId");

                    b.ToTable("HistoryEvents_task_category_changed");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskCreatedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasIndex("TaskId");

                    b.ToTable("HistoryEvents_task_created");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskDeletedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HistoryEvents_task_deleted");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskEditedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("NewDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasIndex("TaskId");

                    b.ToTable("HistoryEvents_task_edited");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusChangedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("NewTaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasIndex("NewTaskStatusId");

                    b.HasIndex("OldTaskStatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("HistoryEvents_task_status_changed");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusCreatedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("HistoryEvents_task_status_created");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusDeletedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HistoryEvents_task_status_deleted");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusEditedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("int");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("HistoryEvents_task_status_edited");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_UserJoinedEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("InvitorId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("InvitorId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryEvents_user_joined");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_UserLeftEntity", b =>
                {
                    b.HasBaseType("DataAccess.Entities.History.HistoryEventEntity");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryEvents_user_left");
                });

            modelBuilder.Entity("DataAccess.Entities.CategoryEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", "LastHistoryEvent")
                        .WithMany("LastInCategories")
                        .HasForeignKey("LastHistoryEventId");

                    b.HasOne("DataAccess.Entities.SpaceEntity", "Space")
                        .WithMany("Categories")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastHistoryEvent");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HistoryEventEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "Actor")
                        .WithMany("CausedEvents")
                        .HasForeignKey("ActorId");

                    b.HasOne("DataAccess.Entities.SpaceEntity", "Space")
                        .WithMany("HistoryEvents")
                        .HasForeignKey("SpaceId");

                    b.Navigation("Actor");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.SpaceEntity", "Space")
                        .WithMany("Roles")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("DataAccess.Entities.SpaceEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "Creator")
                        .WithMany("CreatedSpaces")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DataAccess.Entities.SpaceMembershipEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.RoleEntity", "Role")
                        .WithMany("AppliedToMemberships")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.SpaceEntity", "Space")
                        .WithMany("Members")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.UserEntity", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.CategoryEntity", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", "LastHistoryEvent")
                        .WithMany("LastInTasks")
                        .HasForeignKey("LastHistoryEventId");

                    b.HasOne("DataAccess.Entities.TaskEntity", "ParentTask")
                        .WithMany("ChildrenTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.TaskStatusEntity", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LastHistoryEvent");

                    b.Navigation("ParentTask");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskStatusEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", "LastHistoryEvent")
                        .WithMany("LastInTaskStatuses")
                        .HasForeignKey("LastHistoryEventId");

                    b.HasOne("DataAccess.Entities.SpaceEntity", "Space")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastHistoryEvent");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("RightEntityRoleEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.RightEntity", null)
                        .WithMany()
                        .HasForeignKey("RightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryCreatedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_CategoryCreatedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryDeletedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_CategoryDeletedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_CategoryEditedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_CategoryEditedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleAssignedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_RoleAssignedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleCreatedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_RoleCreatedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_RoleEditedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_RoleEditedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceCreatedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_SpaceCreatedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceEditedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_SpaceEditedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_SpaceImageChanged", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_SpaceImageChanged", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskCategoryChangedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskCategoryChangedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.CategoryEntity", "NewCategory")
                        .WithMany()
                        .HasForeignKey("NewCategoryId");

                    b.HasOne("DataAccess.Entities.CategoryEntity", "OldCategory")
                        .WithMany()
                        .HasForeignKey("OldCategoryId");

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("NewCategory");

                    b.Navigation("OldCategory");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskCreatedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskCreatedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskDeletedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskDeletedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskEditedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskEditedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusChangedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskStatusChangedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskStatusEntity", "NewTaskStatus")
                        .WithMany()
                        .HasForeignKey("NewTaskStatusId");

                    b.HasOne("DataAccess.Entities.TaskStatusEntity", "OldTaskStatus")
                        .WithMany()
                        .HasForeignKey("OldTaskStatusId");

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("NewTaskStatus");

                    b.Navigation("OldTaskStatus");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusCreatedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskStatusCreatedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskStatusEntity", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusDeletedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskStatusDeletedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_TaskStatusEditedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_TaskStatusEditedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskStatusEntity", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_UserJoinedEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_UserJoinedEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.UserEntity", "Invitor")
                        .WithMany()
                        .HasForeignKey("InvitorId");

                    b.HasOne("DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Invitor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HE_UserLeftEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.History.HistoryEventEntity", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.History.HE_UserLeftEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataAccess.Entities.History.HistoryEventEntity", b =>
                {
                    b.Navigation("LastInCategories");

                    b.Navigation("LastInTasks");

                    b.Navigation("LastInTaskStatuses");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleEntity", b =>
                {
                    b.Navigation("AppliedToMemberships");
                });

            modelBuilder.Entity("DataAccess.Entities.SpaceEntity", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("HistoryEvents");

                    b.Navigation("Members");

                    b.Navigation("Roles");

                    b.Navigation("TaskStatuses");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.Navigation("ChildrenTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskStatusEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("CausedEvents");

                    b.Navigation("CreatedSpaces");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
